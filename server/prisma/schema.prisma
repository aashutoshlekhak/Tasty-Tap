// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        Int      @id @default(autoincrement())
  username String   @unique
  email   String   @unique
  password String
  full_name String
  profile_picture String
  is_admin Boolean @default(false)
  address String
  contact String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  orders Order[]
  reviews Review[]
}

model menu_items{
  id Int @id @default(autoincrement())
  name String
  price Float
  description String
  image_url String
  category String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  orders Order[]
  reviews Review[]
}

model Order {
  id Int @id @default(autoincrement())
  user_id Int
  menu_id Int
  payment_status payment_status @default(PENDING)
  delivery_status delivery_status @default(PENDING)
  quantity Int @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [user_id], references: [id])
  menu_items menu_items @relation(fields: [menu_id], references: [id])
}

model Review {
  id Int @id @default(autoincrement())
  user_id Int
  menu_id Int
  review String
  rating Int @default(3)
  user User @relation(fields: [user_id], references: [id])
  menu_items menu_items @relation(fields: [menu_id], references: [id])
  sentiment review_sentiment @default(NEUTRAL)
}

enum Role {
  USER
  ADMIN
}

enum payment_status {
  PENDING
  PAID
}

enum delivery_status {
  PENDING
  DISPATCHED
  DELIVERED
}


enum review_sentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
}